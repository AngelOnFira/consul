---
name: build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - release/**
      - releng-329

env:
  PKG_NAME: consul
  METADATA: oss

jobs:
  set-product-version:
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.set-product-version.outputs.product-version }}
      base-product-version: ${{ steps.set-product-version.outputs.base-product-version }}
      product-date: ${{ steps.get-product-version.outputs.product-date }}
      pre-version: ${{ steps.set-product-version.outputs.prerelease-product-version }}
      shared-ldflags: ${{ steps.shared-ldflags.outputs.shared-ldflags }}
    steps:
      - uses: actions/checkout@v3
      - name: set product version
        id: set-product-version
        uses: hashicorp/actions-set-product-version@v1
      - name: get product version
        id: get-product-version
        run: |
          CONSUL_DATE=$(build-support/scripts/build-date.sh)
          ## TODO: This assumes `make version` outputs 1.1.1+ent-prerel
          echo "::set-output name=product-date::${CONSUL_DATE}"

      - name: Set shared -ldflags
        id: shared-ldflags
        run: |
          T="github.com/hashicorp/consul/version"
          echo "::set-output name=shared-ldflags::-X ${T}.GitCommit=${GITHUB_SHA::8} \
          -X ${T}.GitDescribe=${{ steps.set-product-version.outputs.product-version }} \
          -X ${T}.BuildDate=${{ steps.get-product-version.outputs.product-date }} \
          "
  validate-outputs:
    needs: set-product-version
    runs-on: ubuntu-latest
    steps:
      - name: Validate Outputs
        run: |
          echo "Product Version: ${{ needs.set-product-version.outputs.product-version }}"
          echo "Base Product Version: ${{ needs.set-product-version.outputs.base-product-version }}"
          echo "Product Metadata: ${{ env.METADATA }}"
          echo "Product Date: ${{ needs.set-product-version.outputs.product-date }}"
          echo "Prerelease Version: ${{ needs.set-product-version.outputs.pre-version }}"
          echo "Ldflags: ${{ needs.set-product-version.outputs.shared-ldflags }}"
  generate-metadata-file:
    needs: set-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: 'Checkout directory'
        uses: actions/checkout@v3
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.set-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build:
    needs: set-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - {go: "1.19.4", goos: "linux", goarch: "386"}
          - {go: "1.19.4", goos: "linux", goarch: "amd64"}
          - {go: "1.19.4", goos: "linux", goarch: "arm"}
          - {go: "1.19.4", goos: "linux", goarch: "arm64"}
          - {go: "1.19.4", goos: "freebsd", goarch: "386"}
          - {go: "1.19.4", goos: "freebsd", goarch: "amd64"}
          - {go: "1.19.4", goos: "windows", goarch: "386"}
          - {go: "1.19.4", goos: "windows", goarch: "amd64"}
          - {go: "1.19.4", goos: "solaris", goarch: "amd64"}
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit

  build-linux:
    name: Build Consul Linux
    needs: product-metadata
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm, arm64, 386, amd64]
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit

  build-darwin:
    needs: set-product-version
    runs-on: macos-latest
    strategy:
      matrix:
        goos: [ darwin ]
        goarch: [ "amd64", "arm64" ]
        go: [ "1.19.4" ]
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui netcgo
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit

  build-docker:
    name: Build Consul Docker
    needs:
      - set-product-version
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["386", "amd64", "arm", "arm64"]
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.set-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@v3

      # Strip everything but MAJOR.MINOR from the version string and add a `-dev` suffix
      # This naming convention will be used ONLY for per-commit dev images
      - name: Set docker dev tag
        run: |
          version="${{ env.version }}"
          echo "dev_tag=${version%.*}-dev" >> $GITHUB_ENV

      - name: Docker Build (Action)
        uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: default
          arch: ${{matrix.arch}}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}-${{ github.sha }}
          smoke_test: .github/scripts/verify_docker.sh v${{ env.version }}

  build-docker-ubi-redhat:
    name: Docker Build UBI Image for RedHat Registry
    needs:
      - set-product-version
      - build
    runs-on: ubuntu-latest
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.set-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: ubi
          arch: amd64
          redhat_tag: quay.io/redhat-isv-containers/60f9fdbec3a80eac643abedf:${{env.version}}-ubi
          smoke_test: .github/scripts/verify_docker.sh v${{ env.version }}

  build-docker-ubi-dockerhub:
    name: Docker Build UBI Image for DockerHub
    needs:
      - set-product-version
      - build
    runs-on: ubuntu-latest
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.set-product-version.outputs.product-version}}

    steps:
      - uses: actions/checkout@v3

      # Strip everything but MAJOR.MINOR from the version string and add a `-dev` suffix
      # This naming convention will be used ONLY for per-commit dev images
      - name: Set docker dev tag
        run: |
          version="${{ env.version }}"
          echo "dev_tag=${version%.*}-dev" >> $GITHUB_ENV

      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: ubi
          arch: amd64
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}-ubi
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}-ubi
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}-ubi-${{ github.sha }}
          smoke_test: .github/scripts/verify_docker.sh v${{ env.version }}

  verify-linux:
    needs:
      - set-product-version
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["386", "amd64", "arm", "arm64"]
      fail-fast: true
    env:
      version: ${{ needs.set-product-version.outputs.product-version }}
      zip_name: consul_${{ needs.set-product-version.outputs.product-version }}_linux_${{ matrix.arch }}.zip

    name: Verify ${{ matrix.arch }} linux binary
    steps:
      - uses: actions/checkout@v3

      - name: Download ${{ matrix.arch  }} zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.zip_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: ${{ matrix.arch == 'arm' || matrix.arch == 'arm64' }}
        with:
          # this should be a comma-separated string as opposed to an array
          platforms: arm,arm64

      - name: Run verification for ${{ matrix.arch }} binary
        run: .github/scripts/verify_artifact.sh ${{ env.zip_name }} v${{ env.version }}

  verify-darwin:
    needs:
      - set-product-version
      - build-darwin
    runs-on: macos-latest
    strategy:
      fail-fast: true
    env:
      version: ${{needs.set-product-version.outputs.product-version}}
      zip_name: consul_${{ needs.set-product-version.outputs.product-version }}_darwin_amd64.zip

    name: Verify amd64 darwin binary
    steps:
      - uses: actions/checkout@v3

      - name: Download amd64 darwin zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.zip_name }}

      - name: Unzip amd64 darwin zip
        run: unzip ${{ env.zip_name }}

      - name: Run verification for amd64 darwin binary
        run: .github/scripts/verify_bin.sh ./consul v${{ env.version }}

  verify-linux-packages-deb:
    needs:
      - build
      - set-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["i386", "amd64", "armhf", "arm64"]
      # fail-fast: true
    env:
      version: ${{ needs.set-product-version.outputs.product-version }}

    name: Verify ${{ matrix.arch }} debian package
    steps:
      - uses: actions/checkout@v3

      - name: Set package version
        run: |
          echo "pkg_version=$(echo ${{ needs.set-product-version.outputs.product-version }} | sed 's/\-/~/g')" >> $GITHUB_ENV

      - name: Set package name
        run: |
          echo "pkg_name=consul_${{ env.pkg_version }}-1_${{ matrix.arch }}.deb" >> $GITHUB_ENV

      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.pkg_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Verify ${{ matrix.arch }} debian package
        run: ./.github/scripts/verify_artifact.sh ${{ env.pkg_name }} v${{ env.version }}

  verify-linux-packages-rpm:
    needs:
      - build
      - set-product-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO(eculver): re-enable when there is a smaller verification container available
        arch: ["i386", "x86_64"] #, "armv7hl", "aarch64"]
    env:
      version: ${{ needs.set-product-version.outputs.product-version }}

    name: Verify ${{ matrix.arch }} rpm
    steps:
      - uses: actions/checkout@v3

      - name: Set package version
        run: |
          echo "pkg_version=$(echo ${{ needs.set-product-version.outputs.product-version }} | sed 's/\-/~/g')" >> $GITHUB_ENV

      - name: Set package name
        run: |
          echo "pkg_name=consul-${{ env.pkg_version }}-1.${{ matrix.arch }}.rpm" >> $GITHUB_ENV

      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.pkg_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Verify ${{ matrix.arch }} rpm
        run: ./.github/scripts/verify_artifact.sh ${{ env.pkg_name }} v${{ env.version }}
