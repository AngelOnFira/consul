name: reusable-unit-split

on:
  workflow_call:
    inputs:
      directory:
        required: true
        type: string
      go-version:
        required: true
        type: string
      go-arch:
        required: false
        type: string
        default: ""
      uploaded-binary-name:
        required: false
        type: string
        default: "consul-bin" 
      runs-on:
        description: An expression indicating which kind of runners to use.
        required: false
        type: string
        default: "['ubuntu-latest']"
      args:
        required: false
        type: string
        default: ""
      runner-count: 
        required: false
        type: number
        default: 1

env:
  TEST_RESULTS: /tmp/test-results
  GOTESTSUM_VERSION: 1.8.2
  GOARCH: ${{inputs.go-arch}}
  TOTAL_RUNNERS: ${{inputs.runner-count}}
  MAX_RUNNER_INDEX: $((${{ inputs.runner-count }}-1))
  MIN_RUNNER_INDEX: 0
  
jobs:
  runner-indexes:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    name: Generate runner indexes
    #
    # This job generates a JSON Array of integers ranging from 1 to X.
    # That array is used in the matrix section of the test-go job below.
    #
    outputs:
      runner-indexes: ${{ steps.generate-index-list.outputs.indexes }}
    steps:
    - id: generate-index-list
      run: |
        INDEX_LIST="$(seq ${{env.MIN_RUNNER_INDEX}} ${{ env.MAX_RUNNER_INDEX }})"
        INDEX_JSON="$(jq --null-input --compact-output '. |= [inputs]' <<< "${INDEX_LIST}")"
        echo "indexes=${INDEX_JSON}" >> "${GITHUB_OUTPUT}"
  go-test:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    name: "go-test #${{ matrix.runner-index }}"
    needs:
      - runner-indexes
    strategy:
      matrix:
        runner-index: ${{ fromJSON(needs.runner-indexes.outputs.runner-indexes) }}
    steps:      
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # pin@v3.3.0
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # pin@v3.5.0
        with:
          go-version-file: 'go.mod'
      - name: Setup go mod cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install gotestsum
        run: |
          wget https://github.com/gotestyourself/gotestsum/releases/download/v${{env.GOTESTSUM_VERSION}}/gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          sudo tar -C /usr/local/bin -xzf gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
          rm gotestsum_${{env.GOTESTSUM_VERSION}}_linux_amd64.tar.gz
      - run: mkdir -p ${{env.TEST_RESULTS}}
      - name: go mod download
        working-directory: ${{inputs.directory}}
        run: go mod download
      - name: Download consul
        uses: actions/download-artifact@v3
        with:
          name: ${{inputs.uploaded-binary-name}}
          path: /usr/local/bin
      - name: Make sure consul is executable
        run: sudo chmod +x /usr/local/bin/consul
      - name: Display downloaded file
        run: ls -ld consul 
        working-directory: /usr/local/bin
      - run: go env
      - name: Generate go test Slice
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v1
        with:
          total: ${{ env.TOTAL_RUNNERS }}
          index: ${{ matrix.runner-index }}
      - name: Run tests 
        working-directory: ${{inputs.directory}}
        run: |
          PACKAGE_NAMES=${{ steps.split-tests.outputs.test-suite }}

          # TODO(JM): figure out why this erroring
          # if [[ github.ref == 'refs/heads/main' || !startsWith(github.ref, 'refs/heads/release/') ]]; then
          #   export GO_TEST_FLAGS="-short"
          # fi
          
          # some tests expect this umask, and arm images have a different default
          umask 0022

          gotestsum \
          --format=short-verbose \
          --jsonfile /tmp/jsonfile/go-test-sdk.log \
          --debug \
          --rerun-fails=3 \
          --rerun-fails-max-failures=40 \
          --rerun-fails-report=/tmp/gotestsum-rerun-fails \
          --packages="$PACKAGE_NAMES" \              
          --junitfile ${{env.TEST_RESULTS}}/gotestsum-report.xml -- \
          -tags="${{env.GOTAGS}}" -p 2 \
          -cover -coverprofile=coverage.txt

      - uses: actions/upload-artifact@master
        with:
          name: test-results
          path: ${{env.TEST_RESULTS}}
      - uses: actions/upload-artifact@master
        with:
          name: jsonfile
          path: /tmp/jsonfile
      - name: "Re-run fails report"
        run: |
          .github/scripts/rerun-fails-report.sh /tmp/gotestsum-rerun-fails
      - name: Notify Slack
        if: failure()
        run: .github/scripts/notify_slack.sh
